import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

public class Interface {
    public JLabel title;
    public JTextField userInput;
    public JButton findStats;
    public JLabel position;
    public JLabel lastSeasonPlayed;
    public JLabel team;
    public JLabel league;
    public JLabel gamesPlayed;
    public JPanel Interface;
    public JLabel goals;
    public JLabel assists;
    public JLabel points;
    public JLabel penaltyInMinutes;
    public JLabel wins;
    public JLabel loses;
    public JLabel overtimeLoses;
    public JLabel totalMinutes;
    public JLabel goalsAllowed;
    public JLabel shutouts;
    public JLabel savePercentage;
    public JLabel goalsAllowedAverage;

    public static JFrame frame;

    public Interface() {
        findStats.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 1. get the inputted text, then come up with all the data
                Document document;
                Element dataRow;
                String completedURL;

//                frame.getContentPane().removeAll();
//                startUp();

                while (true) {
                    try {
                        completedURL = MakeURL.createURL(userInput.getText());
                        document = Connection.connect(completedURL);
                        break;
                    } catch (IOException f) {
                        continue;
                    }
                }
                dataRow = DataSelection.selectData(document);

                if (Player.isGoaltender(document)) {
                    Goaltender goaltender = Goaltender.goalieInfo(document, dataRow);
                    position.setText("Position: " + Player.getPosition(document));
                    lastSeasonPlayed.setText("Last Season Played: " + goaltender.lastSeasonPlayed);
                    team.setText("Last Team Played For: " + goaltender.lastTeamPlayedFor);
                    league.setText("League: " + goaltender.league);
                    gamesPlayed.setText("Games Played: " + goaltender.gamesPlayed);

                    wins.setText("Wins: " + goaltender.wins);
                    loses.setText("Loses: " + goaltender.loses);
                    overtimeLoses.setText("Overtime Loses: " + goaltender.overtimeLoses);
                    totalMinutes.setText("Total Minutes: " + goaltender.totalMinutes);
                    goalsAllowed.setText("Goals Allowed: " + goaltender.goalsAllowed);
                    goalsAllowedAverage.setText("Goals Allowed Average: " + goaltender.goalsAllowedAverage);
                    shutouts.setText("Shutouts" + goaltender.shutouts);
                    savePercentage.setText("Save Percentage: " + goaltender.savePercentage);

                } else {

                    NonGoaltender nonGoalie = NonGoaltender.nonGoalieInfo(document, dataRow);
                    position.setText("Position: " + Player.getPosition(document));
                    lastSeasonPlayed.setText("Last Season Played: " + nonGoalie.lastSeasonPlayed);
                    team.setText("Last Team Played For: " + nonGoalie.lastTeamPlayedFor);
                    league.setText("League: " + nonGoalie.league);
                    gamesPlayed.setText("Games Played: " + nonGoalie.gamesPlayed);

                    goals.setText("Goals: " + nonGoalie.goals);
                    assists.setText("Assists: " + nonGoalie.assists);
                    points.setText("Points: " + nonGoalie.points);
                    penaltyInMinutes.setText("Penalty in Minutes: " + nonGoalie.penaltyInMinutes);
                }

            }
        });
    }

    public static void main(String[] args) {
        startUp();
    }

    public static void startUp() {
        frame = new JFrame("Interface");
        frame.setContentPane(new Interface().Interface);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Interface = new JPanel();
        Interface.setLayout(new GridBagLayout());
        Interface.setPreferredSize(new Dimension(600, 300));
        final JPanel spacer1 = new JPanel();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.VERTICAL;
        Interface.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        Interface.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.VERTICAL;
        Interface.add(spacer3, gbc);
        position = new JLabel();
        position.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        Interface.add(position, gbc);
        lastSeasonPlayed = new JLabel();
        lastSeasonPlayed.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 6;
        Interface.add(lastSeasonPlayed, gbc);
        team = new JLabel();
        team.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 6;
        Interface.add(team, gbc);
        league = new JLabel();
        league.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 6;
        Interface.add(league, gbc);
        gamesPlayed = new JLabel();
        gamesPlayed.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 8;
        gbc.gridy = 6;
        Interface.add(gamesPlayed, gbc);
        title = new JLabel();
        title.setText("NHLPlayerStats");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTH;
        Interface.add(title, gbc);
        userInput = new JTextField();
        userInput.setMinimumSize(new Dimension(50, 23));
        userInput.setPreferredSize(new Dimension(50, 28));
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        Interface.add(userInput, gbc);
        findStats = new JButton();
        findStats.setText("Find Stats!");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        Interface.add(findStats, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        Interface.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        Interface.add(spacer5, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        Interface.add(spacer6, gbc);
        final JPanel spacer7 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 7;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        Interface.add(spacer7, gbc);
        goals = new JLabel();
        goals.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(goals, gbc);
        assists = new JLabel();
        assists.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(assists, gbc);
        points = new JLabel();
        points.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(points, gbc);
        penaltyInMinutes = new JLabel();
        penaltyInMinutes.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(penaltyInMinutes, gbc);
        wins = new JLabel();
        wins.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(wins, gbc);
        loses = new JLabel();
        loses.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(loses, gbc);
        overtimeLoses = new JLabel();
        overtimeLoses.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(overtimeLoses, gbc);
        totalMinutes = new JLabel();
        totalMinutes.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(totalMinutes, gbc);
        final JPanel spacer8 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 9;
        gbc.fill = GridBagConstraints.VERTICAL;
        Interface.add(spacer8, gbc);
        goalsAllowed = new JLabel();
        goalsAllowed.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 8;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(goalsAllowed, gbc);
        savePercentage = new JLabel();
        savePercentage.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 10;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(savePercentage, gbc);
        shutouts = new JLabel();
        shutouts.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 10;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(shutouts, gbc);
        goalsAllowedAverage = new JLabel();
        goalsAllowedAverage.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 10;
        gbc.anchor = GridBagConstraints.WEST;
        Interface.add(goalsAllowedAverage, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Interface;
    }
}
